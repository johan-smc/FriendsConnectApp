import { Component, ViewChild } from '@angular/core';
import { IonicPage, NavParams, ViewController, AlertController, Content } from 'ionic-angular';
import { Comment } from '../../shared/comment';
import { CommentProvider } from '../../providers/comment/comment';

/**
 * Generated class for the CommentsPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-comments',
  templateUrl: 'comments.html',
})
export class CommentsPage {

  @ViewChild(Content) contentArea: Content;

  private activityId: number;
  newComment: string;
  comments: Comment[];

  constructor(
    public navParams: NavParams, 
    private viewCtrl: ViewController,
    private commentProvider: CommentProvider,
    private alertCtrl: AlertController,
    ) {
  }

  dismiss() {
    this.viewCtrl.dismiss();
  }

  ionViewDidLoad() {
    this.newComment = '';
    this.activityId = this.navParams.get('activityId');
    this.getComments();
  }

  /**
   * Displays an alert based on the error's message.
   * @param {any} errmess JSON with error generated by the API.
   */
  getAllCommentsErrorHandler(errmess): void {
    const registerErrorAlert = this.alertCtrl.create(
      { title: 'Ups...', subTitle: errmess.message, buttons: ['Dismiss'] });
    registerErrorAlert.present();
  }

  /**
   * Gets all comments of the current activity
   * from the API and reverses it's order.
   */
  private getComments(): void {
    this.commentProvider.getAllActivitiyComments(this.activityId).subscribe((resp) => {
      this.comments = resp;
      this.comments.reverse();
      this.contentArea.scrollToBottom();
    }, errmess => this.getAllCommentsErrorHandler(errmess));
  }

  sendComment(): void {
    const comment: Comment = {description: this.newComment} as Comment;
    console.log('Comment: ', comment);
    this.commentProvider.createComment(this.activityId, comment).subscribe((resp) => {
      this.getComments();
      this.newComment = '';
    }, errmess => this.getAllCommentsErrorHandler(errmess));
  }

  isCommentEmpty() :boolean {
    return this.newComment === '';
  }

}
