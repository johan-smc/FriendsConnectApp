import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams } from 'ionic-angular';
import {AlertController} from 'ionic-angular';
import { Activity } from '../../shared/activity';
import {Storage} from '@ionic/storage';
import { ActivityProvider } from '../../providers/activity/activity';
import {ConversationPage} from '../conversation/conversation';
/**
 * Generated class for the ListChatsPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-list-chats',
  templateUrl: 'list-chats.html',
})
export class ListChatsPage {

  showedActivities: Activity[]; // activities to show in view
  constructor(
    public navCtrl: NavController,
    public navParams: NavParams,
    private storage: Storage,
    private activityProvider: ActivityProvider,
    private alertCtrl: AlertController,
  ) {
  }

  ionViewDidLoad() {
  
  }
  ionViewWillEnter(){
    this.reLoadActivities();
  }
  reLoadActivities(): void {
    this.showedActivities = [];
    this.selectedSuscribe();
    this.selectedOwn();
  }
  /**
   * Displays an alert based on the error's message.
   * @param {any} errmess JSON with error generated by the API.
   */
  ErrorHandler(errmess) {
    const registerErrorAlert = this.alertCtrl.create(
        {title: 'Ups...', subTitle: 'Wrong code.', buttons: ['Dismiss']});
    registerErrorAlert.present();
  }

  /**
   * Load activities suscribe
   */
  selectedSuscribe(): void{
    this.storage.get('user').then(user => {
      this.activityProvider.getMyActivities(user.username)
          .subscribe((resp) => {
            this.setActivities(resp);
          }, errmess => this.ErrorHandler(errmess));
    });
  }

  /**
   * Load own activities
   */
  selectedOwn() : void{
    this.storage.get('user').then(user => {
      this.activityProvider.getOwnActivities(user.username)
          .subscribe((resp) => {
            this.setActivities(resp);
          }, errmess => this.ErrorHandler(errmess));
    });
  }
  /**
   * Set activities
   * @param activitiesTemp 
   */
  setActivities(activitiesTemp: Activity[])
  {
    this.showedActivities = this.showedActivities.concat(activitiesTemp);
  }
  /**
   * TODO action with user selected chat
   */
  onChatSelected(chat)
  {
    console.log(chat);
    this.navCtrl.push(ConversationPage);
  }

}
