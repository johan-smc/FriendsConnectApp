import {Component} from '@angular/core';
import {FormBuilder, FormGroup, Validators} from '@angular/forms';
import {Storage} from '@ionic/storage';
import {IonicPage, NavController, NavParams} from 'ionic-angular';
import {AlertController} from 'ionic-angular';
import {ToastController} from 'ionic-angular';

import {UserProvider} from '../../providers/user/user';
import {regexNumbers} from '../../shared/regexs';
import {TabsPage} from '../tabs/tabs';

/**
 * Generated class for the ValidateCodePage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-validate-code',
  templateUrl: 'validate-code.html',
})
export class ValidateCodePage {
  private code: string;
  validateCodeForm: FormGroup;

  constructor(
      public navCtrl: NavController,
      public navParams: NavParams,
      private formBuilder: FormBuilder,
      private alertCtrl: AlertController,
      private userProvider: UserProvider,
      public toastCtrl: ToastController,
      private storage: Storage,
  ) {
    this.buildValidateCodeForm();
  }

  ionViewDidLoad() {}
  /**
   * Builds the validate code form and adds it's validators.
   */
  private buildValidateCodeForm(): void {
    this.validateCodeForm = this.formBuilder.group({
      code: [
        '',
        [
          Validators.required, Validators.minLength(6), Validators.maxLength(6),
          Validators.pattern(regexNumbers)
        ]
      ]
    });
  }
  /**
   * Sends the field's information to validate in the API and
   * goes to the tabs view.
   */
  onSubmit(): void {
    this.code = this.validateCodeForm.value.code;
    this.storage.get('user').then(user => {
      this.userProvider.validateCode(user.username, this.code)
          .subscribe((resp) => {
            this.presentToast('Yay! Code validate succesfull.', 3000);
            this.navCtrl.setRoot(TabsPage);
          }, errmess => this.ErrorHandler(errmess));
    });
  }
  /**
   * Sends the field's information to re send code in the API.
   */
  onSubmitReSend(): void {
    this.code = this.validateCodeForm.value.code;
    this.storage.get('user').then(user => {
      this.userProvider.reSendValidateCode(user.username).subscribe((resp) => {
        this.presentToast('Yay! Email Send.', 3000);
      }, errmess => this.ErrorHandlerReSendEmail(errmess));
    });
  }
  /**
   * Displays an alert based on the error's message.
   * @param {any} errmess JSON with error generated by the API.
   */
  ErrorHandler(errmess) {
    const registerErrorAlert = this.alertCtrl.create(
        {title: 'Ups...', subTitle: 'Wrong code.', buttons: ['Dismiss']});
    registerErrorAlert.present();
  }
  /**
   * Displays an alert based on the error's message.
   * @param {any} errmess JSON with error generated by the API.
   */
  ErrorHandlerReSendEmail(errmess) {
    const registerErrorAlert = this.alertCtrl.create(
        {title: 'Ups...', subTitle: 'Contact to admin.', buttons: ['Dismiss']});
    registerErrorAlert.present();
  }

  /*
   * Display toast
   */
  presentToast(messageIn: string, durationIn: number, positionIn = 'down') {
    const toast = this.toastCtrl.create(
        {message: messageIn, duration: durationIn, position: positionIn});
    toast.present();
  }
}
