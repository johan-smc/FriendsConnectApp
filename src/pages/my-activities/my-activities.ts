import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams } from 'ionic-angular';
import { Activity } from '../../shared/activity';
import {AlertController} from 'ionic-angular';
import {ToastController} from 'ionic-angular';
import {Storage} from '@ionic/storage';
import { ModalController } from 'ionic-angular';
import { ActivityProvider } from '../../providers/activity/activity';
import { CommentsPage } from '../comments/comments';
/**
 * Generated class for the MyActivitiesPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-my-activities',
  templateUrl: 'my-activities.html',
})
export class MyActivitiesPage {
  

  private activities: Activity[]; // Activities
  showedActivities: Activity[]; // activities to show in view
  segment: string;
  constructor(
    public navCtrl: NavController,
    public navParams: NavParams,
    private alertCtrl: AlertController,
    public toastCtrl: ToastController,
    private storage: Storage,
    private activityProvider: ActivityProvider,
    private modalCtrl: ModalController,
  ) {
    this.showedActivities = [];
    this.setDefaultActivities();
  }

  ionViewDidLoad() {
  }
  ionViewWillEnter(){
    this.reLoadActivities();
  }
  reLoadActivities(): any {
    if( this.segment === 'suscribe' )
    {
      this.selectedSuscribe();
    }
    else if( this.segment === 'own' )
    {
      this.selectedOwn();
    }
  }
  /**
   * Displays an alert based on the error's message.
   * @param {any} errmess JSON with error generated by the API.
   */
  ErrorHandler(errmess) {
    const registerErrorAlert = this.alertCtrl.create(
        {title: 'Ups...', subTitle: 'Wrong code.', buttons: ['Dismiss']});
    registerErrorAlert.present();
  }
  /**
   * Set activities
   * @param activitiesTemp 
   */
  setActivities(activitiesTemp: Activity[])
  {
    this.activities = activitiesTemp;
    this.showedActivities = Object.assign([], this.activities);
    console.log(activitiesTemp);
    if( this.activities.length === 0 )
    {
      this.presentToast("No activities", 3000, "down");
    }
  }

  /**
   * Load activities suscribe
   */
  selectedSuscribe(): void{
    this.storage.get('user').then(user => {
      this.activityProvider.getMyActivities(user.username)
          .subscribe((resp) => {
            this.setActivities(resp);
          }, errmess => this.ErrorHandler(errmess));
    });
  }

  /**
   * Load own activities
   */
  selectedOwn() : void{
    this.storage.get('user').then(user => {
      this.activityProvider.getOwnActivities(user.username)
          .subscribe((resp) => {
            this.setActivities(resp);
          }, errmess => this.ErrorHandler(errmess));
    });
  }
  /**
   * Set default activities
   */
  setDefaultActivities(): void {
    this.segment = "suscribe";
  }
  /*
   * Display toast
   */
  presentToast(messageIn: string, durationIn: number, positionIn = 'down') {
    const toast = this.toastCtrl.create(
        {message: messageIn, duration: durationIn, position: positionIn});
    toast.present();
  }

  /**
   * When user makes a query, the string is used to filter through all the 
   * activities with a name that contains the query.
   * @param {string} query 
   */
  getActivities(query: string): void {
    if (query && query.trim() !== '') {
      this.showedActivities = this.activities.filter(activity => 
        activity.name.toLowerCase().includes(query.toLowerCase()));
    } else {
      this.showedActivities = Object.assign([], this.activities);
    }
  }
  unSubscribeHandler(activityId: number): void {
    this.storage.get('user').then(user => {
      this.activityProvider.unSubscribeToActivity(activityId, user.username).subscribe((resp) => {
        this.showConfirmUnSubscriptionToast();
        this.deleteActivity(activityId);
      }, errmess => this.ErrorHandler(errmess));
    });
  }
  editActivityHandler(activityId: number): void {
    console.log("edit.....");
  }
  /**
   * Shows a confirmation if the un subscription is successful.
   */
  private showConfirmUnSubscriptionToast(): void {
    const toast = this.toastCtrl.create({
      message: 'Un Subscription successfully',
      duration: 3000,
      position: 'middle'
    });
    toast.present();
  }
  /**
   * Delete activity in list of activities
   * @param activityId 
   */
  deleteActivity(activityId: number): void {
    let activity = this.activities.find(item => item.id === activityId);
    let index = this.activities.indexOf(activity);
    this.activities.splice(index, 1);
    activity = this.showedActivities.find(item => item.id === activityId );
    index = this.showedActivities.indexOf(activity);
    this.showedActivities.splice(index, 1);
  }
  openCommentModal(activityId: number) {
    const commetModal = this.modalCtrl.create(CommentsPage, { activityId: activityId } );
    commetModal.present();
  }
}
