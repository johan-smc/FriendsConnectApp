import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams } from 'ionic-angular';
import {FormBuilder, FormGroup, Validators} from '@angular/forms';
import {ForgotPasswordData} from '../../shared/forgotPasswordData'
import {PasswordValidation} from '../../shared/passwordValidator';
import {UserProvider} from '../../providers/user/user';
import {AlertController} from 'ionic-angular';
import { LoginPage } from '../login/login';
/**
 * Generated class for the ForgotPasswordPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-forgot-password',
  templateUrl: 'forgot-password.html',
})
export class ForgotPasswordPage {
  fogotPasswordForm : FormGroup;
  private data : ForgotPasswordData;
  private sendEmail : boolean;

  constructor(
    public navCtrl: NavController,
    public navParams: NavParams,
    private formBuilder: FormBuilder,
    private userProvider: UserProvider,
    private alertCtrl: AlertController,
    ) {
    this.buildForgotForm();
    this.sendEmail = false;
  }

  ionViewDidLoad() {
  }

  /**
   * Builds the forgot form and adds it's validators.
   */
  private buildForgotForm(): void {
    this.fogotPasswordForm = this.getFormEmail();
  }
  /**
   * Return form with only email
   */
  private getFormEmail() : any{
    return this.formBuilder.group({
      email: [
        '',
        [
          Validators.required, Validators.minLength(4),
          Validators.maxLength(30)
        ]
      ]
    });
  }
  /**
   * Return form with all params
   */
  private getFormChangePassword() : any{
    return this.formBuilder.group({
      email: [
        '',
        [
          Validators.required, Validators.minLength(4),
          Validators.maxLength(30)
        ]
      ],
      code: [
        '',
        [
          Validators.required, Validators.minLength(6),
          Validators.maxLength(6)
        ]
      ],
      password: [
        '',
        [
          Validators.required, Validators.minLength(4),
          Validators.maxLength(20)
        ]
      ],
      confirmPassword: [
        '',
        [
          Validators.required, Validators.minLength(4),
          Validators.maxLength(20)
        ]
      ]
    },
    {validator: PasswordValidation.MatchPassword});
  }
  /**
   * Sends the field's information to validate in the API and
   * goes to the tabs view.
   */
  onSubmit(): void {
    this.data = this.fogotPasswordForm.value;
    console.log(this.data);
    if( this.sendEmail == false )
    {
      this.sendEmailForgotPassword();
    }
    else
    {
      this.changePasswordWithCode();
    }
    this.chageButton()
  }
  /**
   * Displays an alert based on the error's message.
   * @param {any} errmess JSON with error generated by the API.
   */
  ErrorHandler(errmess) {
    const registerErrorAlert = this.alertCtrl.create(
        {title: 'Ups...', subTitle: errmess.message, buttons: ['Dismiss']});
    registerErrorAlert.present();
  }
  /**
   * Send email for request code for new password
   */
  sendEmailForgotPassword(): void {
    this.userProvider.fogotPassword(this.data.email).subscribe((resp) => {
      const registerSuccessAlert = this.alertCtrl.create(
        {title: 'Yay!', subTitle: 'Email send succesfull.', buttons: ['Dismiss']});
      registerSuccessAlert.present();
    }, errmess => this.ErrorHandler(errmess))
  }
  /**
   * Send data for request chage password with a validate code
   */
  changePasswordWithCode(): void {
    this.userProvider.resetPassword(this.data).subscribe((resp) => {
      const registerSuccessAlert = this.alertCtrl.create(
        {title: 'Yay!', subTitle: 'Password change send succesfull.', buttons: ['Dismiss']});
      registerSuccessAlert.present();
      this.navCtrl.setRoot(LoginPage)
    }, errmess => this.ErrorHandler(errmess))
  }
  /**
   * Change button for send email or chage password
   */
  chageButton(): void{
    this.sendEmail = !this.sendEmail;
    if( this.sendEmail )
    {
      this.fogotPasswordForm = this.getFormChangePassword();
    }
    else
    {
      this.fogotPasswordForm = this.getFormEmail()
    }
    this.fogotPasswordForm.patchValue({
      'email': this.data.email
    });
  }
}
