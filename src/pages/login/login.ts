import {Component} from '@angular/core';
import {FormBuilder, FormGroup, Validators} from '@angular/forms';
import {Storage} from '@ionic/storage';
import {IonicPage, NavController, NavParams} from 'ionic-angular';
import {AlertController} from 'ionic-angular';

import {UserProvider} from '../../providers/user/user';
import {User} from '../../shared/user';
import {RegistrarPage} from '../registrar/registrar';
import {ForgotPasswordPage} from '../forgot-password/forgot-password';
import {TabsPage} from '../tabs/tabs';

/**
 * Generated class for the LoginPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-login',
  templateUrl: 'login.html',
})
export class LoginPage {
  loginForm: FormGroup;
  private user: User;

  constructor(
      public navCtrl: NavController, public navParams: NavParams,
      private formBuilder: FormBuilder, private alertCtrl: AlertController,
      private userProvider: UserProvider, private storage: Storage) {
    this.loadUserFromStorage();
    this.buildLoginForm();
  }

  ionViewDidLoad() {}

  /**
   * Displays an alert based on the error's message.
   * @param {any} errmess JSON with error generated by the API.
   */
  loginErrorHandler(errmess) {
    const registerErrorAlert = this.alertCtrl.create(
        {title: 'Ups...', subTitle: errmess.message, buttons: ['Dismiss']});
    registerErrorAlert.present();
  }

  /**
   * Sends the field's information to validate in the API and
   * goes to the tabs view.
   */
  onSubmit(): void {
    this.user = this.loginForm.value;
    this.userProvider.loginUser(this.user).subscribe((resp) => {
      const registerSuccessAlert = this.alertCtrl.create(
          {title: 'Yay!', subTitle: 'Login succesfull.', buttons: ['Dismiss']});
      this.userProvider.setUser(this.user);
      this.userProvider.setToken(resp['token']);
      registerSuccessAlert.present();
      this.navCtrl.setRoot(TabsPage);
    }, errmess => this.loginErrorHandler(errmess));
  }

  /**
   * Redirects to the register page for the user to
   * signUp.
   */
  onSignup(): void {
    this.navCtrl.push(RegistrarPage);
  }

  /**
   * Redirects to the forgot password page for the user to
   * reset password.
   */
  onForgotPassword(): void {
    this.navCtrl.push(ForgotPasswordPage);
  }

  /**
   * Builds the login form and adds it's validators.
   */
  private buildLoginForm(): void {
    this.loginForm = this.formBuilder.group({
      username: [
        '',
        [
          Validators.required, Validators.minLength(4), Validators.maxLength(20)
        ]
      ],
      password: [
        '',
        [
          Validators.required, Validators.minLength(7), Validators.maxLength(20)
        ]
      ]
    });
  }

  /**
   * Loads the user from local storage if there is one stored.
   */
  private loadUserFromStorage(): void {
    this.storage.get('user').then(user => {
      if (user) {
        this.user = user;
        this.loginForm.patchValue(
            {'username': this.user.username, 'password': this.user.password});
      }
    });
  }
}
